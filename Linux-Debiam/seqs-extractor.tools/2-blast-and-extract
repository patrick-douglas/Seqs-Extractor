#!/bin/bash
w=$(tput sgr0) 
r=$(tput setaf 1)
g=$(tput setaf 2) 
y=$(tput setaf 3) 
home_dir=$(echo ~/)
	echo "${g}"
	echo	"________________________________________________________________________________"
	echo 	""
	echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
	echo	"________________________________________________________________________________"
	echo	""
	echo "${w}"
	echo    "--------------------------------------------------------------------------------"
	echo    "                             Working directory                                  "
	echo    "--------------------------------------------------------------------------------"
		echo ""
	echo "What is the directory that you are working, Leave blank to use default"
	echo "${y}NOTE: Default is your Home folder($home_dir)${w}"
		echo "${g}"
		read work_dir
		echo "${w}"

if [ ! -d $work_dir ];
then
echo "${r}"
while 
read -p 'Try again: ' work_dir && [ ! -d $work_dir ]; do
echo "${r}
-------------------------------------------------------------
ERROR ${w}$work_dir${r} IS NOT A VALID DIRECTORY, PLEASE CHOOSE A VALID FOLDER!
-------------------------------------------------------------
"
done
fi

cd $work_dir
if [ $? -eq 0 ]
then
clear
else
echo "${r}
-------------------------------------------------------------------------------------------
ERROR ${w}$work_dir${r} 
IS NOT A VALID DIRECTORY, PLEASE CHOOSE A VALID FOLDER AND TRY RUN THE Seqs-Extractor AGAIN,
THIS COMMONLY OCCURS BECAUSE YOU ARE TRYING USE AND INVALID FOLDER OR A DIRECTORY THAT
CONTAINS SPACES.
${y}Example /home/lbn/teste dois/${r}
THE FOLDER NAMES CAN NOT CONTAIN SPACES, YOU CAN REPLACE SPACES BY UNDERLINE 
${y}Example /home/lbn/teste_dois/${r}
-------------------------------------------------------------------------------------------
"
function pause(){
   read -p "$*"
}
echo -e "setf 4" | tput -S
pause 'Press [Enter] key to finish the script and this terminal window!'
exit 1
fi

if [[ -z "$work_dir" ]]
then
selected_dir="$home_dir"
else
selected_dir="$echo $work_dir"
fi
									# BLAST AND EXTRACTION 

echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "                                 Blast search                                   "
echo    "--------------------------------------------------------------------------------"
	echo ""
	echo "Which BLAST do you want to use?
${g} 1${w} to run BLASTX
${g} 2${w} to run BLASTN"
		echo "${g}"
echo -n "" ; read -p "" -n 1 blast

if [ "$blast" != "1" ] && [ "$blast" != "2" ]

then
echo "${r}"

while 
read  -p 'Try again: ' blast && [ "$blast" != "1" ] && [ "$blast" != "2" ] ; do
echo "${r}
-------------------------------------------------------------
ERROR ${w}$blast${r} IS NOT A VALID OPTION, PLEASE CHOOSE A VALID OPTION!
-------------------------------------------------------------
"
done
fi

blastname=""
if [ $blast = "1" ]; then
	blastname="BLASTX"
fi

if [ $blast = "2" ]; then
	blastname="BLASTN"
fi


clear
echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "                                 Fasta to query                                 "
echo    "--------------------------------------------------------------------------------"
	echo ""
	echo "Enter the name of fasta file to run${g} $blastname ${w}(example.fasta)"
	echo "${g}"
		read fastafile_path
		echo ""

if [ -f $fastafile_path ];
then
echo "Fasta file is ok!"
else
while 
read  -p 'Error File not found, Try again: ' fastafile_path && [ ! -f $fastafile_path ] ; do
echo "${r}
--------------------------------------------------------------------------
THE FILE ${w}$fastafile_path${r} NOT FOUND, VERIFY IF THE NAME OR PATH TO FILE IS CORRECT!
YOU TYPED ""${w}$fastafile_path${r}""
--------------------------------------------------------------------------
"
done
fi

clear
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "             Format $blastname database or use your already formatted database?                "
echo    "--------------------------------------------------------------------------------"
	echo ""
	echo "${g} 1${w} to format a new database
${g} 2${w} to use a preexisting database"
		echo "${g}"
echo -n "" ; read -p "" -n 1 db_opt
		echo "${w}"

if [ "$db_opt" != "1" ] && [ "$db_opt" != "2" ]

then
echo "${r}"

while 
read  -p 'Try again: ' db_opt && [ "$db_opt" != "1" ] && [ "$db_opt" != "2" ] ; do
echo "${r}
-------------------------------------------------------------
ERROR ${w}$db_opt${r} IS NOT A VALID OPTION, PLEASE CHOOSE A VALID OPTION!
-------------------------------------------------------------
"
done
fi
clear

if [ $db_opt = 2 ]
then
echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "            What is your $blastname database?                "
echo    "--------------------------------------------------------------------------------"
	echo ""
	echo "Please enter the name of the pre-formated $blastname database?"
		echo "${g}"
		read own_db_path
		echo "${w}"
if [ ! -f $own_db ] ;

then
echo "${r}"

while 
read  -p 'Try again: ' own_db && [ ! -f $own_db ] ; do
echo "${r}
-------------------------------------------------------------
ERROR ${w}$own_db${r} IS NOT A VALID OPTION, PLEASE CHOOSE A VALID OPTION!
-------------------------------------------------------------
"
done
fi

basename $own_db_path > $work_dir/own_db_path.txt
own_db=`cat $work_dir/own_db_path.txt`
rm -rf own_db_path.txt

if [ $db_opt = 2 ]
then	createdb=$own_db

fi
clear

else 

echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "                           Format database to $blastname                        "
echo    "--------------------------------------------------------------------------------"
	echo ""
echo "Enter the name of file to format $blastname database:"	
		echo "${g}"
		read createdb_path
		echo "${w}"

if [ -f $createdb_path ];
then
basename $createdb_path > $work_dir/createdb_path.txt
createdb=`cat $work_dir/createdb_path.txt`
rm -rf createdb_path.txt
echo "Database file is ok!"
else
while 
read  -p 'Error File not found, Try again: ' createdb_path && [ ! -f $createdb_path ] ; do
echo "${r}
-------------------------------------------------------------
THE FILE ${w}$createdb_path${r} NOT FOUND, VERIFY IF THE NAME OR PATH TO FILE IS CORRECT!
YOU TYPED ""${w}$createdb_path${r}""
-------------------------------------------------------------
"
done
fi
fi


clear
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "                                Blast E-value                                   "
echo    "--------------------------------------------------------------------------------"
	echo ""
echo "Click the link bellow to learn more about E-value." 
echo "https://blast.ncbi.nlm.nih.gov/blast/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=FAQ#expect"
	echo ""
echo "Enter the Expected value(E-value) (Default 1e-3)"	
	echo "${g}"
	read evalue
	echo "${w}"

if [[ -z "$evalue" ]]
then
evalue=1e-3
else
echo ""
fi	
clear
nproc > $work_dir/.cpu
	threads=`cat  $work_dir/.cpu`
rm -rf $work_dir/.cpu
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "				 CPU Threads  					 "
echo    "--------------------------------------------------------------------------------"
	echo ""
echo "How many CPU-cores do you want to use in the $blastname search? (Default $threads)"	
	echo "${g}"
	read threads
	echo "${w}"

if [[ -z "$threads" ]]
then
#CPU
nproc > $work_dir/.cpu
	threads=`cat $work_dir/.cpu`
rm -rf $work_dir/.cpu
else
threads="$echo $threads"
fi

clear
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
echo    "--------------------------------------------------------------------------------"
echo    "	   Do you want to add other $blastname parameters?[optional]		 "
echo    "--------------------------------------------------------------------------------"
	echo ""
echo "Insert other $blastname parameters bellow separated by spaces and starting 
with dashes, or leave blank to skip (Example: -max_target_seqs 1)"	
	echo "${w}"
	read other_blast_param
	echo "${g}"

clear

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
echo "${g}"
echo	"________________________________________________________________________________"
echo 	""
echo    "______________________________ Seqs-Extractor 1.1 ______________________________"
echo	"________________________________________________________________________________"
echo	""
echo	"${y}NOTE: Your work directory is${w} $selected_dir${g}"
echo "${w}"
	echo    "--------------------------------------------------------------------------------"
	echo    "	 	       Percentage of top hits to extract		 "
	echo    "--------------------------------------------------------------------------------"
		echo ""
	echo "What is the percentage of alignment of the extracted sequences?"	
	echo "EXAMPLE:"
	echo "To get all sequences that match from 10% to 100% type 10-100"
	echo "To get 100% just type 100"
	echo "NOTE: Only tens!"	
	echo "Or type${g} help${w} to see all available options"
		echo "${w}"
	 read	pct_ident
		echo "${g}"

if [ "$pct_ident" != "10" ] && [ "$pct_ident" != "20" ] && [ "$pct_ident" != "30" ] && [ "$pct_ident" != "40" ] && [ "$pct_ident" != "50" ] && [ "$pct_ident" != "60" ] && [ "$pct_ident" != "70" ] && [ "$pct_ident" != "80" ] && [ "$pct_ident" != "90" ] && [ "$pct_ident" != "100" ] && [ "$pct_ident" != "10-100" ] && [ "$pct_ident" != "20-100" ] && [ "$pct_ident" != "30-100" ] && [ "$pct_ident" != "40-100" ] && [ "$pct_ident" != "50-100" ] && [ "$pct_ident" != "60-100" ] && [ "$pct_ident" != "70-100" ] && [ "$pct_ident" != "80-100" ] && [ "$pct_ident" != "90-100" ] && [ "$pct_ident" != "all" ] && [ "$pct_ident" != "help" ]
			then

echo "${r}"

while 
read  -p 'Error, try again: ' pct_ident && [ "$pct_ident" != "10" ] && [ "$pct_ident" != "20" ] && [ "$pct_ident" != "30" ] && [ "$pct_ident" != "40" ] && [ "$pct_ident" != "50" ] && [ "$pct_ident" != "60" ] && [ "$pct_ident" != "70" ] && [ "$pct_ident" != "80" ] && [ "$pct_ident" != "90" ] && [ "$pct_ident" != "100" ] && [ "$pct_ident" != "10-100" ] && [ "$pct_ident" != "20-100" ] && [ "$pct_ident" != "30-100" ] && [ "$pct_ident" != "40-100" ] && [ "$pct_ident" != "50-100" ] && [ "$pct_ident" != "60-100" ] && [ "$pct_ident" != "70-100" ] && [ "$pct_ident" != "80-100" ] && [ "$pct_ident" != "90-100" ] && [ "$pct_ident" != "all" ] && [ "$pct_ident" != "help" ] ; do
echo "${r}
-------------------------------------------------------------
ERROR ${w}$pct_ident${r} IS NOT A VALID OPTION, PLEASE CHOOSE A VALID OPTION!
-------------------------------------------------------------
"
done
fi

clear
if [ "$pct_ident" = "help" ]
then
echo "${w} 
ALL AVAILABLE OPTIONS 
Extract all sequences that match X% with the query sequences!

	type ${g} 10 ${w} to get only the sequences that match with 10%	
	type ${g} 20 ${w} to get only the sequences that match with 20%	
	type ${g} 30 ${w} to get only the sequences that match with 30%		
	type ${g} 40 ${w} to get only the sequences that match with 40%		
	type ${g} 50 ${w} to get only the sequences that match with 50%		
	type ${g} 60 ${w} to get only the sequences that match with 60%		
	type ${g} 70 ${w} to get only the sequences that match with 70%		
	type ${g} 80 ${w} to get only the sequences that match with 80%		
	type ${g} 90 ${w} to get only the sequences that match with 90%		
	type ${g} 100 ${w} to get only the sequences that match with 100%
	type ${g} 10-100 ${w} to get only the sequences that match with 10% to 100% of hits	
	type ${g} 20-100 ${w} to get only the sequences that match with 20% to 100% of hits	
	type ${g} 30-100 ${w} to get only the sequences that match with 30% to 100% of hits	
	type ${g} 40-100 ${w} to get only the sequences that match with 40% to 100% of hits	
	type ${g} 50-100 ${w} to get only the sequences that match with 50% to 100% of hits	
	type ${g} 60-100 ${w} to get only the sequences that match with 60% to 100% of hits	
	type ${g} 70-100 ${w} to get only the sequences that match with 70% to 100% of hits	
	type ${g} 80-100 ${w} to get only the sequences that match with 80% to 100% of hits	
	type ${g} 90-100 ${w} to get only the sequences that match with 90% to 100% of hits	

	Or type${g} all ${w}to no filter and get all sequences the match in the blast search
"
function pause(){
   read -p "$*"
}
echo -e "setf 4" | tput -S
pause 'Press [Enter] key to finish the script'
exit 1
fi
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

if [ $blast = 1 ]
then	dbtype=prot 

fi

if [ $blast = 2 ]
then	dbtype=nucl

fi

if [ $db_opt = 2 ]
then
echo "${w}"
	echo    "--------------------------------------------------------------------------------"
	echo	"		     Using $own_db as $blastname database!			 "
	echo    "--------------------------------------------------------------------------------"
	echo 	"${w}"

createdb=$own_db
else 

echo	""
echo	"${w}"
echo    "--------------------------------------------------------------------------------"
echo    "  			     Formatting $blastname database 				 "
echo    "--------------------------------------------------------------------------------"
echo	"Running!"
echo	""
echo	"makeblastdb -in $createdb -dbtype $dbtype"
echo	"-------------------------------------------------------------------------------"

if 
#function of slash spin
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

(  makeblastdb -in $createdb -dbtype $dbtype ) &
echo -n "Running${g} makeblastdb -in $createdb -dbtype $dbtype${w}, please wait... "
spinner $!
echo " DONE!"

then 
	echo    "--------------------------------------------------------------------------------"
	echo	"			Database formatted successfully!!				 "
	echo    "--------------------------------------------------------------------------------"
	echo 	"${w}"
else
	echo -e "setf 4" | tput -S  # set fg red
	echo	"ERROR!"
	echo	"PLEASE VERIFY IF THE COMMANDS AND NAME OF fiLES ARE CORRECT!!!!"
function pause(){
   read -p "$*"
}
echo -e "setf 4" | tput -S
pause 'Press [Enter] key to finish the script'
	exit 1

fi
fi

basename $fastafile_path > $work_dir/fastafile.txt
fastafile=`cat $work_dir/fastafile.txt`
rm -rf fastafile.txt

#Replace _ by +
sed 's/_/+/g' $fastafile > .tmp

#Replace spaces by underline
sed 's/ /_/g' .tmp > .fastafile.no_spaces
rm -rf .tmp

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
echo 	"${w}"
echo	""
echo    "--------------------------------------------------------------------------------"
echo    "                                  Running $blastname                            "
echo    "--------------------------------------------------------------------------------"
echo 	"${w}
	------------------------------------------------------------------------
	$blastname options [REQUIRED]
	------------------------------------------------------------------------
	-query${g} $fastafile${w}
	-db${g} $createdb ${w}
	-E-value${g} $evalue${w}
	-num_threads${g} $threads${w}
	-outfmt 6 [mandatory]

	------------------------------------------------------------------------
	Other BLAST parameters [OPTIONAL]:
	------------------------------------------------------------------------
	$other_blast_param

	------------------------------------------------------------------------
	Extraction options
	------------------------------------------------------------------------
	Sequences with $pct_ident% of similarity will be extracted 	

"


if [ $blast = "1" ]; then
	blast_0="blastx"
	fi

if  [ $blast = "2" ]; then
	blast_0="blastn"
	fi
if [ $db_opt = 2 ]
then

#function of slash spin
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

( $blast_0 -query .fastafile.no_spaces -db $createdb -out $blast_0-evalue_$evalue -evalue $evalue -num_threads $threads -outfmt 6 $other_blast_param ) &
echo -n "Running${g} $blastname${w}, please wait... "
spinner $!
echo " DONE!"

else

if 

#function of slash spin
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

( $blast_0 -query .fastafile.no_spaces -db $createdb -out $blast_0-evalue_$evalue -evalue $evalue -num_threads $threads -outfmt 6 $other_blast_param ) &
echo -n "Running${g} $blastname${w}, please wait... "
spinner $!
echo " DONE!"
	then		
echo " "
else
echo "${r}ERROR BLAST COMMANDS FAILED!
PLEASE VERIFY IF YOU ADD THE CORRECT OPTIONS IN $blastname!!!! ${w}"
function pause(){
   read -p "$*"
}
echo -e "setf 4" | tput -S
pause 'Press [Enter] key to finish the script'	
exit 1
fi
fi

#	PERCENTAGE OF IDENTITY  10 TO 100%

if [ $pct_ident = 10-100 ]
then		      
	grep -F "10." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "11." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "12." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "13." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "14." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "15." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "16." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "17." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "18." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "19." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "20." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "21." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "22." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "23." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "24." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "25." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "26." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "27." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "28." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "29." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "30." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "31." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "32." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "34." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "35." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "36." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "37." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "38." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "39." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "40." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "41." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "42." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "44." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "45." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "46." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "47." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "48." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "49." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "50." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "51." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "52." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "53." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "54." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "55." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "56." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "57." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "58." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "59." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  20 TO 100%
if [ $pct_ident = 20-100 ]
then	
	grep -F "20." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "21." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "22." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "23." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "24." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "25." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "26." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "27." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "28." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "29." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "30." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "31." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "32." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "34." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "35." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "36." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "37." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "38." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "39." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "40." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "41." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "42." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "44." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "45." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "46." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "47." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "48." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "49." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "50." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "51." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "52." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "53." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "54." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "55." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "56." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "57." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "58." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "59." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  30 TO 100%
if [ $pct_ident = 30-100 ]
then	
	grep -F "30." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "31." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "32." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "34." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "35." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "36." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "37." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "38." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "39." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "40." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "41." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "42." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "44." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "45." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "46." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "47." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "48." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "49." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "50." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "51." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "52." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "53." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "54." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "55." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "56." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "57." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "58." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "59." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  40 TO 100%
if [ $pct_ident = 40-100 ]
then	
	grep -F "40." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "41." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "42." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "44." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "45." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "46." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "47." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "48." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "49." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "50." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "51." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "52." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "53." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "54." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "55." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "56." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "57." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "58." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "59." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  50 TO 100%
if [ $pct_ident = 50-100 ]
then	
	grep -F "50." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "51." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "52." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "53." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "54." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "55." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "56." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "57." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "58." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "59." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  60 TO 100%
if [ $pct_ident = 60-100 ]
then	
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  70 TO 100%
if [ $pct_ident = 70-100 ]
then	
	grep -F "70." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "72." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "73." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "74." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "75." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "76." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "77." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "78." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "79." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "80." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "81." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  80 TO 100%
if [ $pct_ident = 80-100 ]
then	
	grep -F "80." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "81." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

#	PERCENTAGE OF IDENTITY  90 TO 100%
if [ $pct_ident = 90-100 ]
then	
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 10 ]
then	
	grep -F "10." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "11." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "12." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "13." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "14." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "15." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "16." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "17." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "18." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "19." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 20 ]
then	
	grep -F "20." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "21." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "22." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "23." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "24." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "25." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "26." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "27." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "28." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "29." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 30 ]
then	
	grep -F "30." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "31." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "32." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "33." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "34." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "35." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "36." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "37." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "38." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "39." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 40 ]
then	
	grep -F "40." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "41." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "42." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "43." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "44." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "45." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "46." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "47." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "48." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "49." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 50 ]
then	
	grep -F "50." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "51." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "52." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "53." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "54." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "55." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "56." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "57." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "58." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "59." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 60 ]
then	
	grep -F "60." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "61." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "62." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "63." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "64." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "65." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "66." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "67." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "68." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "69." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 70 ]
then	
	grep -F "70." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "71." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "72." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "73." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "74." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "75." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "76." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "77." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "78." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "79." $blast_0-evalue_$evalue >> .blast_res_filt
fi

if [ $pct_ident = 80 ]
then	
	grep -F "80." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "81." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "82." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "83." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "84." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "85." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "86." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "87." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "88." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "89." $blast_0-evalue_$evalue >> .blast_res_filt

fi

if [ $pct_ident = 90 ]
then	
	grep -F "90." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "91." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "92." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "93." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "94." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "95." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "96." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "97." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "98." $blast_0-evalue_$evalue >> .blast_res_filt
	grep -F "99." $blast_0-evalue_$evalue >> .blast_res_filt
fi

	if [ $pct_ident = 100 ]
	then	
		grep -F "100." $blast_0-evalue_$evalue >> .blast_res_filt

	fi

if [ $pct_ident = all ]
then	
	cp $blast_0-evalue_$evalue .blast_res_filt
fi

#Extract only the first colum
cut -f1 .blast_res_filt > .blast_res_filt_col

#Remove duplicated IDs
sort -u .blast_res_filt_col > .blast_res_filt_col_no_dup
#rm -rf .temp3
#add > before sequences title
sed 's/^/>/' .blast_res_filt_col_no_dup > .blast_res_filt_col_no_dup_simb
#rm -rf .temp4

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	if 
				echo "${w}"
				echo    "--------------------------------------------------------------------------------"
				echo	"Extracting sequences, just wait.			 "
				echo 	"This may take a while and depends on the size of your database. 	 "
				echo    "--------------------------------------------------------------------------------"
				echo	""
#function of slash spin
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

( cut -c 2- .blast_res_filt_col_no_dup_simb | xargs -n 1 samtools faidx .fastafile.no_spaces > .seqs_only_the_tophit_tmp ) &
echo -n "Running SAMTOOLS, please wait... "
spinner $!
echo " DONE!"
rm -rf .blast_res_filt_col_no_dup_simb

#Replace underline by spaces
sed 's/_/ /g' .seqs_only_the_tophit_tmp > .seqs_only_the_tophit_spaces
rm -rf .seqs_only_the_tophit_tmp
sed 's/+/_/g' .seqs_only_the_tophit_spaces > seqs_only_the_tophit_$pct_ident%.fasta
rm -rf .seqs_only_the_tophit_spaces


sed 's/_/ /g' .blast_res_filt > .blast_res_filt_nspaces
rm -rf .blast_res_filt
sed 's/+/_/g' .blast_res_filt_nspaces > list_of_tophit-$pct_ident%_and_$blast_0-results
rm -rf .blast_res_filt_nspaces
sed 's/+/_/g' $blast_0-evalue_$evalue > .blast-evalue
rm -rf $blast_0-evalue_$evalue
cat .blast-evalue > $blast_0-evalue_$evalue
rm -rf .blast-evalue

#Clean temporary files
rm -rf .blast_res_filt_col .blast_res_filt_col_no_dup .blast_res_filt_nspaces .fastafile.no_spaces.fai .fastafile.no_spaces

then 
echo 	"${w}"
echo    "--------------------------------------------------------------------------------"
echo	"		 	 Sequences successfully extracted!!!			 "
echo    "--------------------------------------------------------------------------------"
	else
		echo -e "setf 4" | tput -S  # set fg red
		echo	"ERROR!"
		echo	"PLEASE VERIFY IF THE COMMANDS AND NAME OF fiLES ARE CORRECT!!!!"
function pause(){
   read -p "$*"
}
echo -e "setf 4" | tput -S
pause 'Press [Enter] key to finish the script'		
exit 1
	fi

if [ -s seqs_only_the_tophit_$pct_ident%.fasta ]
then

echo 	"${g}"
echo	"===================================================================================================="
echo 	""
echo    "===================================== Seqs-Extractor 1.1 =========================================="
echo 	""
echo	"===================================================================================================="
echo    "======================= Laboratório de Biologia Molecular e Neuroecologia =========================="
echo	'=======================  INSTITUTO FEDERAL DO PARÁ (IFPA) Campus Bragança =========================='
echo	"===================================================================================================="
echo '				         ___        ______    __     __
                                        |   |      |      \  |  \   |  | 
                                        |   |      |   D   ) |   \  |  | 
                                        |   |      |      /  |    \ |  | 
                                        |   |____  |      \  |  |\ \|  | 
                                        |        | |   D   ) |  | \    |  
                                        |________| |______/  |__|  \___|
'                   
echo	"All commands completed successfully"
echo	":D"
echo	"Support by E-mail to patrick@ufpa.br"
echo	""
echo    "-----------------------------------------------------------------------------------------------------"
echo	"The extracted sequences are written in${w} seqs_only_the_tophit_$pct_ident%.fasta${g}"
echo	"The${w} $blastname${g} results are written in${w} $blast_0-results_evalue_$evalue.outfmt6 ${g} "
echo	"The file${w} list_of_tophit-$pct_ident%_and_$blast_0-results${g} contain the $blastname results only for $pct_ident% of similarity"
echo	"The files of $blastname database are available in ${w}$work_dir${g}."
echo	"${y}NOTE: Results will be available at${w} $work_dir${g}"
echo    "-----------------------------------------------------------------------------------------------------"

else
clear
     		echo "${r}"
	echo    "-------------------------------------------------------------------------------------------
"
	echo	"No sequences with $pct_ident% was found, please try again by changing your search criteria!
"
	echo	"${g}However, you can access the $blast_0 results in $blast_0-results_evalue_$evalue.outfmt6"
	echo    "${r}-------------------------------------------------------------------------------------------"
	echo	""
rm -rf seqs_only_the_tophit_$pct_ident%.fasta
rm -rf list_of_tophit-$pct_ident%_and_$blast_0-results $blast_0-evalue_$evalue
fi
